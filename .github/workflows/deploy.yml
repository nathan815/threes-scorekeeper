---
name: Prod Deploy

on:
  push:
    branches: [main]

jobs:
  wait-for-tests:
    name: Wait for CI
    runs-on: ubuntu-latest

    steps:
      - name: Wait for all other workflows
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.ref }}
          running-workflow-name: Wait for CI
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: production

    needs: [wait-for-tests]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: '${{ secrets.ACR_SERVER }}'
          username: '${{ secrets.ACR_USERNAME }}'
          password: '${{ secrets.ACR_PASSWORD }}'

      - name: Download frontend build artifact
        id: download_frontend_artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          path: ./infra/front-proxy/frontend-build
          workflow: frontend.yml
          workflow_conclusion: success
          branch: ${{ github.ref_name }}
          # commit: ${{ github.sha }}

      - name: Build, tag, and push frontend image to ACR
        if: ${{ steps.download_frontend_artifact.outputs }}
        env:
          IMAGE_NAME: threes-frontend
          IMAGE_TAG: latest
        working-directory: infra/front-proxy
        run: |
          docker build -t ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG .
          docker push ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Build, tag, and push backend image to ACR
        env:
          IMAGE_NAME: threes-backend
          IMAGE_TAG: latest
        working-directory: backend
        run: |
          docker build -t ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG .
          docker push ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    needs: [docker-build]

    steps:
      - uses: actions/checkout@v2

      - name: Run Deploy Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy.yml
          directory: ./infra/ansible
          key: ${{ secrets.APP_SERVER_SSH_PRIVATE_KEY }}
          inventory: |
            [all]
            ${{ vars.APP_SERVER_HOSTNAME }} ansible_connection=ssh ansible_user=app_server_user
          requirements: galaxy-requirements.yml
          options: |
            --verbose
